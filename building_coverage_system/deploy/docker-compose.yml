version: '3.8'

services:
  # Main application service
  building-coverage-app:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
        APP_VERSION: ${APP_VERSION:-1.0.0}
    container_name: building-coverage-app
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - EMBEDDING_MODEL_PATH=${EMBEDDING_MODEL_PATH:-/app/models}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_models:/app/models
      - ./config:/app/config:ro
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      - redis
      - postgres
    networks:
      - building-coverage-network
    healthcheck:
      test: ["CMD", "python", "-c", "import building_coverage_system; print('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery worker for background tasks
  celery-worker:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
    container_name: building-coverage-worker
    restart: unless-stopped
    command: ["celery", "-A", "building_coverage_system.celery_app", "worker", "--loglevel=info", "--concurrency=4"]
    environment:
      - APP_ENV=${APP_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_models:/app/models
      - ./config:/app/config:ro
    depends_on:
      - redis
      - postgres
    networks:
      - building-coverage-network

  # Celery beat scheduler
  celery-beat:
    build:
      context: ..
      dockerfile: deploy/Dockerfile
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
    container_name: building-coverage-scheduler
    restart: unless-stopped
    command: ["celery", "-A", "building_coverage_system.celery_app", "beat", "--loglevel=info"]
    environment:
      - APP_ENV=${APP_ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - ./config:/app/config:ro
    depends_on:
      - redis
      - postgres
    networks:
      - building-coverage-network

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: building-coverage-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - building-coverage-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for metadata and results storage
  postgres:
    image: postgres:15-alpine
    container_name: building-coverage-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-building_coverage}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - building-coverage-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-building_coverage}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: building-coverage-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - building-coverage-app
    networks:
      - building-coverage-network
    profiles:
      - with-nginx

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: building-coverage-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - building-coverage-network
    profiles:
      - monitoring

  # Grafana for monitoring dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: building-coverage-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - building-coverage-network
    profiles:
      - monitoring

# Networks
networks:
  building-coverage-network:
    driver: bridge
    name: building-coverage-network

# Volumes
volumes:
  app_data:
    name: building-coverage-app-data
  app_logs:
    name: building-coverage-app-logs
  app_models:
    name: building-coverage-app-models
  redis_data:
    name: building-coverage-redis-data
  postgres_data:
    name: building-coverage-postgres-data
  prometheus_data:
    name: building-coverage-prometheus-data
  grafana_data:
    name: building-coverage-grafana-data