apiVersion: apps/v1
kind: Deployment
metadata:
  name: building-coverage-app
  namespace: building-coverage
  labels:
    app: building-coverage-system
    component: app
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: building-coverage-system
      component: app
  template:
    metadata:
      labels:
        app: building-coverage-system
        component: app
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: building-coverage-app
        image: building-coverage-system:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: APP_ENV
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: database-host
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: database-name
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: database-user
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: database-password
        - name: REDIS_URL
          value: "redis://building-coverage-redis-service:6379"
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: encryption-key
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: data-volume
          mountPath: /app/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: config-volume
        configMap:
          name: building-coverage-config
      - name: logs-volume
        emptyDir: {}
      - name: data-volume
        persistentVolumeClaim:
          claimName: building-coverage-data-pvc
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: building-coverage-worker
  namespace: building-coverage
  labels:
    app: building-coverage-system
    component: worker
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: building-coverage-system
      component: worker
  template:
    metadata:
      labels:
        app: building-coverage-system
        component: worker
        version: v1.0.0
    spec:
      containers:
      - name: building-coverage-worker
        image: building-coverage-system:1.0.0
        imagePullPolicy: Always
        command: ["celery"]
        args: ["-A", "building_coverage_system.celery_app", "worker", "--loglevel=info", "--concurrency=4"]
        env:
        - name: APP_ENV
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: database-host
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: database-name
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: database-user
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: database-password
        - name: REDIS_URL
          value: "redis://building-coverage-redis-service:6379"
        - name: CELERY_BROKER_URL
          value: "redis://building-coverage-redis-service:6379"
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: building-coverage-secrets
              key: encryption-key
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        - name: data-volume
          mountPath: /app/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - celery
            - -A
            - building_coverage_system.celery_app
            - inspect
            - ping
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
      volumes:
      - name: config-volume
        configMap:
          name: building-coverage-config
      - name: logs-volume
        emptyDir: {}
      - name: data-volume
        persistentVolumeClaim:
          claimName: building-coverage-data-pvc
      restartPolicy: Always
      terminationGracePeriodSeconds: 60

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: building-coverage-redis
  namespace: building-coverage
  labels:
    app: building-coverage-system
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: building-coverage-system
      component: redis
  template:
    metadata:
      labels:
        app: building-coverage-system
        component: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: building-coverage-redis-pvc
      restartPolicy: Always